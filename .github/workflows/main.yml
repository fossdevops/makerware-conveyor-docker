name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# These values more or less define the external software load that will be
# added to the image and any cache-bust values needed
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  MAKERBOT_REPO_GPG_FILE_HASH: 6a50b73a1a6907a9e0832e6b79691d32bd8ac610cd1ba2ffaf5ab05e2024a2ba
  MAKERBOT_REPO_GPG_CACHE_BUST_ID: 1
  FKRULL_DEADSNAKES_REPO_GPG_FILE_HASH: ea932c88eaa83690ba0b7b2d34a67063d5dc73c4fb68b7c42614a3a297cf972e
  FKRULL_DEADSNAKES_REPO_GPG_CACHE_BUST_ID: 1

jobs:
  # This workflow contains a single job called "build-and-push-image"
  build-and-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # allow access to github docker registry
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: get the current dynamic git version numbers
        id: get_versions
        run: |
          git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
          . .git/ci-tools/get_tag_from_git.sh > /dev/null
          echo "::set-output name=cur_version::${CUR_VERSION}"
          echo "::set-output name=long_form_cur_version::${LONG_FORM_CUR_VERSION}"

      - name: show version
        run: |
          echo Short version: ${{ steps.get_versions.outputs.cur_version }}
          echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}

      - name: Set short sha
        id: shortsha
        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"

      - name: Set uid:gid
        id: uidgid
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get makerbot repo gpg key file hashes
        id: makerbot-repo-gpg-id
        run: |
          MAKERBOT_REPO_GPG_FILES_HASH=${{ env.MAKERBOT_REPO_GPG_FILE_HASH }}_${{ env.MAKERBOT_REPO_GPG_CACHE_BUST_ID }}
          echo "MAKERBOT_REPO_GPG_FILES_HASH=${MAKERBOT_REPO_GPG_FILES_HASH}"
          echo "::set-output name=hash::${MAKERBOT_REPO_GPG_FILES_HASH}"

      # cache the makerbot repo pgp key
      - name: Cache Makerbot Repo GPG key
        id: cache-makerbot-repo-gpg
        uses: actions/cache@v2
        with:
          path: |
            docker/dev@makerbot.com.gpg.key
          key: makerbot-repo-gpg-hash-${{ steps.makerbot-repo-gpg-id.outputs.hash }}

      - name: Check if makerbot repo key cache extracted
        run: ls -la docker/

      - name: Download Makerbot repo key
        if: steps.cache-makerbot-repo-gpg.outputs.cache-hit != 'true'
        run: |
          cd docker
          curl -fL https://downloads.makerbot.com/makerware/ubuntu/dev@makerbot.com.gpg.key -O
          echo ${{ env.MAKERBOT_REPO_GPG_FILE_HASH }}' dev@makerbot.com.gpg.key' | sha256sum --check --strict

      - name: Get fkrull-deadsnakes repo gpg key file hashes
        id: fkrull-deadsnakes-repo-gpg-id
        run: |
          FKRULL_DEADSNAKES_REPO_GPG_FILES_HASH=${{ env.FKRULL_DEADSNAKES_REPO_GPG_FILE_HASH }}_${{ env.FKRULL_DEADSNAKES_REPO_GPG_CACHE_BUST_ID }}
          echo "FKRULL_DEADSNAKES_REPO_GPG_FILES_HASH=${FKRULL_DEADSNAKES_REPO_GPG_FILES_HASH}"
          echo "::set-output name=hash::${FKRULL_DEADSNAKES_REPO_GPG_FILES_HASH}"

      # cache the makerbot repo pgp key
      - name: Cache fkrull-deadsnakes Repo GPG key
        id: cache-fkrull-deadsnakes-repo-gpg
        uses: actions/cache@v2
        with:
          path: |
            docker/fkrull_deadsnakes_ppa.gpg.key
          key: fkrull-deadsnakes-repo-gpg-hash-${{ steps.fkrull-deadsnakes-repo-gpg-id.outputs.hash }}

      - name: Check if fkrull-deadsnakes repo key cache extracted
        run: ls -la docker/

      - name: Download fkrull-deadsnakes repo key
        if: steps.cache-fkrull-deadsnakes-repo-gpg.outputs.cache-hit != 'true'
        run: |
          cd docker
          gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv 5BB92C09DB82666C
          gpg --export --armor 5BB92C09DB82666C > fkrull_deadsnakes_ppa.gpg.key
          echo ${{ env.FKRULL_DEADSNAKES_REPO_GPG_FILE_HASH }}' fkrull_deadsnakes_ppa.gpg.key' | sha256sum --check --strict

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha
          labels: |
            org.opencontainers.image.ref.name=${{ github.ref }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: docker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          # TODO: need to add the timestamp parameter
          build-args: |
            VERSION=${{ steps.get_versions.outputs.cur_version }}
            LONG_FORM_VERSION=${{ steps.get_versions.outputs.long_form_cur_version }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
